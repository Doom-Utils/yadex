#!/usr/bin/awk -f
#
#	log2html - generate HTML from .log files
#	AYM 1999-08-22
#

# This file is copyright © André Majorel 1999-2004.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of version 2 of the GNU General Public License as published by the
# Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.



# FIXME should sort its arguments

BEGIN {
	numbered   = 0
	standalone = 1
	release    = ""
	html       = 1
	for (i = 1; i < ARGC; i++) {
		if (ARGV[i] == "-h" || ARGV[i] == "--help") {
			usage()
			html = 0
			exit 0;
		}
		else if (ARGV[i] == "-i")
			standalone = 0
		else if (ARGV[i] == "-n")
			numbered = 1
		else if (ARGV[i] == "-r") {
			delete ARGV[i]
			i++
			release = ARGV[i]
		}
		else if (ARGV[i] == "--") {
			delete ARGV[i]
			break
		}
		else if (ARGV[i] ~ /^-/) {
			e = sprintf("%s: unrecognized option -- %c",
				ARGV[0], substr(ARGV[i], 1, 1))
			print e > "/dev/stderr"
		} else
			break
		delete ARGV[i]
	}
	if (standalone) {
		print "<html>\n"\
		  "<head>\n"\
		  "<title>Changes</title>\n"\
		  "<!-- Generated by log2html - DO NOT EDIT ! -->\n"\
		  "</head>\n"\
		  "<body>\n"\
		  "\n\t<h1>Changes</h1>\n"
		html_open = 1
	}
}

$1 ~ /^;release$/ {
	if (list_open) {
		if (numbered)
			print "</ol>"
		else
			print "</ul>"
		list_open = 0
	}
	version = $2
	date    = $3
	if (release != "" && vercmp(version, release) > 0) 
		skip_this_ver = 1
	else {
		skip_this_ver = 0
		print "\n\t\t<h2><a name=\"" version "\">Yadex " version\
			" (" date ")</a></h2>\n"
		if (numbered)
			print "<ol>"
		else
			print "<ul>"
		list_open = 1
	}
}

! skip_this_ver && $1 ~ /^;item$/ {
	domain = toupper (substr ($2, 1, 1)) substr ($2, 2)
	print "  <p><li><strong>" domain "</strong>:"
	next
}

$1 ~ /^;[a-z_A-Z0-9]+$/ {
	next  # Ignore unknown directives
}

! skip_this_ver {
	print "  " $0
	first_line_of_item = 0
}

END {
	if (list_open)
		if (numbered)
			print "</ol>"
		else
			print "</ul>"
	if (html_open)
		print "</body>\n</html>"
}

#
#	usage - print usage text on stdout
#
function usage() {
	print "Usage:"
	print "  log2html -- -h|--help"
	print "  log2html -- [-i] [-m] [-r string] [--] file ..."
	print "Options:"
	print "  -h, --help  Print usage to stdout and exit successfully"
	print "  -i          Generate HTML for inlining (default standalone"
		" document"
	print "  -n          Generate numbered lists (default is unnumbered)"
	print "  -r string   If string is not empty, stop at that version"
}

#
#	vercmp - compare two version numbers
#
#	A version number is a set of point separated numbers.
#	Return a negative number if ver1 is smaller than ver2, a
#	positive number if ver1 is greater than ver2, zero if
#	ver1 and ver2 are equal.
#
function vercmp(ver1, ver2,  split1, split2, fieldnum) {
	split(ver1, split1, /\./)
	split(ver2, split2, /\./)
	for (fieldnum = 1; fieldnum in split1 && fieldnum in split2; fieldnum++)
		if (split1[fieldnum] > split2[fieldnum])
			return 1
		else if (split1[fieldnum] < split2[fieldnum])
			return -1
	return 0
}


