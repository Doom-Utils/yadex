<html>
  <head>
    <title>Yadex user's guide</title>
    $(source style.html.m7)
  </head>
  <body>
    <div align="center">
      <img src="logo_small.png" alt="Fancy logo">
      <br>Yadex $VERSION ($SOURCE_DATE)
      <h1>User's guide</h1>
      <table>
	<tr>
	  <td>
	  </td>
	  <td width="50%" align="center">
	    <strong>
	      Warning : this document is unfinished, ill-structured and
	      incomplete.
	    </strong>
	  </td>
	  <td>
	  </td>
	</tr>
      </table>
    </div>
    <br>
    <br>
    <br>

    <p>Contents&nbsp;:

    <p>
      <!-- generated by htmltoc { -->
      <!-- } generated by htmltoc -->
    </p>

    <hr noshade>
    <h2>Introduction</h2>

		<h3>Yadex in one paragraph</h3>

<p>Yadex is a Doom level (wad) editor for Unix systems running
X, including Linux. It supports Doom, Doom II, Ultimate Doom,
Final Doom, Heretic, Doom press release pre-beta and also, in a
more or less limited way, Hexen, Strife and Doom alpha. It is
available under the terms of the GPL.

		<h3>What do I need ?</h3>

<p>To compile, install and run this release of Yadex, you need

<ul>
  <li>a POSIX-compatible environment (such as Unix),
  <li>a C compiler (ISO-compatible),
  <li>a C++ compiler (ISO-compatible),
  <li>GNU make (it won't work with other flavours of make),
  <li>an HTML viewer to read the doc,
  <li>a Doom/Doom II/Heretic/Hexen/Strife iwad,
  <li>X11R6 or X11R5.
</ul>

<p>More specifically, Yadex expects that

<ul>
  <li>the routines in <code>ctype.h</code> accept the range
    <code>CHAR_MIN</code> through <code>UCHAR_MAX</code>,

  <li>the C library supports <code>hypot()</code> and at least
    one of <code>nanosleep()</code> and <code>usleep()</code>.
</ul>

		<h4>Iwad</h4>

<p>A shareware Doom or Heretic iwad or a demo Hexen or Strife
iwad is okay but you need a registered iwad if you want to be
able to save your changes.

		<h4>Directories</h4>

<p>Yadex mostly conforms to the <a
href="http://www.pathname.com/fhs/"> FHS (filesystem hierarchy
standard)</a>. By default, the installation procedure will try
to copy files in the following directories, creating the
directories if they don't exist&nbsp;;

<ul>
<li><code>/usr/local/bin</code>
<li><code>/etc/yadex/$VERSION</code>
<li><code>/usr/local/man/man6</code>
<li><code>/usr/local/share/games/yadex/$VERSION</code>
</ul>

<p>So make sure you have the necessary rights before installing.
If you don't, install in a different directory by running
<code>./configure</code> with the <code>--prefix</code> option.

		<h4>Display</h4>

<p>Yadex uses about 270 different colours. In most cases, on
PseudoColor displays, there aren't that many free colour cells.
So, if it detects a PseudoColor display, Yadex uses a private
colormap so as to get as many free colour cells as possible.
The drawback of this method is that, when you're in the Yadex
window, all other windows are displayed with wrong colours and
vice-versa.

<p>What's more, as PseudoColor displays typically have 256
colours (at least on PC), which is less than the number of
colours needed, Yadex might have to assign the same physical
colour to different logical colours. If it happens, it will try
to render the colours of the game accurately at the expense of
the application colours.

<p>Executive summary: if you can, use a TrueColor or DirectColor
display and a depth of more than 8 bits per pixel (E.G. by
launching X with "<code>startx -- -bpp 16</code>").

<p>A 640x480 screen is okay though, of course, a larger display
is better.

	<h3>Compiling and installing Yadex</h3>

See <a href="README"><code>README</code></a>.

<p>Don't forget to tell Yadex where your iwads are by changing
the lines "<code>iwad1&nbsp;=</code>",
"<code>iwad2&nbsp;=</code>" etc. in
<code>/etc/yadex/$VERSION/yadex.cfg</code>.
If there is an iwad you don't have, you can just comment out the
corresponding line.

	<hr noshade>
	<h2>Running Yadex</h2>

		<h3>The command line arguments</h3>

<p>Yadex takes two sorts of command line arguments&nbsp;:
parameters and options. An option is a command line argument
that starts with a "<code>-</code>".

<p>Some options take an argument. The argument must be
separated from the option by some whitespace.
<strong>Constructs like "<code>-othingy</code>" are not
recognized. You have to type "<code>-o thingy</code>".</strong>

<p>The "<code>-file</code>" option takes a variable number of
arguments. It uses all the non-options up to the next option.

<p>The options that take no argument can be negated by using a
"<code>+</code>" instead of a "<code>-</code>". For example,
"<code>+sb</code>" will undo the effect of a
"<code>swap_buttons&nbsp;=&nbsp;true</code>" directive in the
config file.

<p>In general, if you specify the same option more than once,
the last occurrence overrides the previous ones. For example,
"<code>yadex&nbsp;+P&nbsp;-P</code>" is equivalent to
"<code>yadex&nbsp;-P</code>". Similarly,
"<code>yadex&nbsp;-i1&nbsp;foo.wad&nbsp;-i1&nbsp;bar.wad&nbsp;-i1&nbsp;baz.wad</code>"
boils down to "<code>yadex&nbsp;-i1&nbsp;baz.wad</code>".

<p>The "<code>-pwad</code>" (or "<code>-pw</code>") option,
however are additive. Each occurrence will add to the previous
ones. For instance,
"<code>yadex&nbsp;-pwad&nbsp;foo.wad&nbsp;-pwad&nbsp;bar.wad</code>"
is equivalent to "<code>yadex&nbsp;foo.wad&nbsp;bar.wad</code>".

<p>Any command line argument that is not an option is treated as
the name of a pwad to load. You can put as many names of pwads
on the command line as you wish (or none at all). The details
of specifying pwad names are discussed <a
href="#pwads">there</a>.

		<h3><a name="opt">Options</a></h3>

<p>To know about the command line options that Yadex
understands, type

<p><code>$$ yadex --help</code>

<p>You'll get this:

<pre>
-b                  <var>string</var>       Run benchmark and exit successfully
-f   -config_file   <var>string</var>       Config file
-d   -debug                      Debug mode
     -expert                     Expert mode
-fc  -fake_cursor                (X11 only) Fake cursor
-fn  -font          <var>string</var>       (X11 only) Font name
-g   -game          <var>string</var>       Game
-G                  <var>string</var>       .ygd search path
-h   -height        <var>integer</var>[<b>%</b>]   (X11 only) Initial window height
-?   -help                       Show usage summary
-i1  -iwad1         <var>string</var>       The name of the Doom/Ultimate Doom iwad
-i2  -iwad2         <var>string</var>       The name of the Doom II/Final Doom iwad
-i3  -iwad3         <var>string</var>       The name of the Heretic iwad
-i4  -iwad4         <var>string</var>       The name of the Hexen iwad
-i5  -iwad5         <var>string</var>       The name of the Strife iwad
-i6  -iwad6         <var>string</var>       The name of the Doom alpha 0.2 iwad
-i7  -iwad7         <var>string</var>       The name of the Doom alpha 0.4 iwad
-i8  -iwad8         <var>string</var>       The name of the Doom alpha 0.5 iwad
-i9  -iwad9         <var>string</var>       The name of the Doom press release iwad
-i10 -iwad10        <var>string</var>       The name of the Strife 1.0 iwad
-P   -no_pixmap                  (X11 only) Use no pixmap
-pw  -pwad          <var>string</var>       Pwad file to load
-q   -quiet                      Quiet mode
-qq  -quieter                    Quieter mode
-s0  -select0                    Automatic selection of 0th object
-sb  -swap_buttons               Swap mouse buttons
-td  -text_dot                   DrawScreenText debug flag
-v   -verbose                    Verbose mode
-w   -width         <var>integer</var>[<b>%</b>]   (X11 only) Initial window width
-z   -zoom_default  <var>integer</var>      Initial zoom factor
--help                           Same as -?
--version                        Print version and exit

</pre>

<p>You might wonder what the "<code>-file</code>",
"<code>-pw</code>" and "<code>-pwad</code>" options are for
since it's so simple to just put the names of the pwads on the
command line. The answer is that they're only here for
compatibility with previous versions of Yadex/Yade/DEU. Don't
use them. They might go away one day.

		<h3><a name="game">Specifying the game for which
		you want to edit</a></h3>

<p>Yadex can handle several games (Doom, Doom II, Heretic, etc.)
but only one at a time. Unfortunately, that game can't be
changed dynamically. If you want to switch game, you must quit
Yadex and run it again.

<p>By default, the game used is the one specified by the
"<code>game=</code>" directive in the configuration file. If
you want to override the default, use "<code>-g
<var>game</var></code>".

<p>The allowed values for <code><var>game</var></code> are&nbsp;:

<dl class="compact">
  <dt>"<code>doom</code>"</dt>
  <dd>Doom and Ultimate Doom (shareware or registered)</dd>

  <dt>"<code>doom02</code>"</dt>
  <dd>Doom alpha 0.2</dd>

  <dt>"<code>doom04</code>"</dt>
  <dd>Doom alpha 0.4</dd>

  <dt>"<code>doom05</code>"</dt>
  <dd>Doom alpha 0.5</dd>

  <dt>"<code>doom2</code>"</dt>
  <dd>Doom II and Final Doom</dd>

  <dt>"<code>doompr</code>"</dt>
  <dd>Doom press release pre-beta</dd>

  <dt>"<code>heretic</code>"</dt>
  <dd>Heretic (shareware or registered)</dd>

  <dt>"<code>hexen</code>"</dt>
  <dd>Hexen (demo or commercial)</dd>

  <dt>"<code>strife</code>"</dt>
  <dd>Strife 1.1 or later (demo or commercial)</dd>

  <dt>"<code>strife10</code>"</dt>
  <dd>Strife 1.0 (demo or commercial)</dd>
</dl>

<p>Not all those games are fully supported. For details, see <a
href="#games">there</a>.


		<h3><a name="pwads">Specifying the names of
		pwads to load</a></h3>

<p>When you have to specify the name of a pwad to load, for
example in the <code>r</code> command, or as a command line
argument, you don't always have to spell it all out.

<ul>
  <li>The <code>.wad</code> extension can be omitted, it will
    be added automatically.  For example, specifying the name
    "<code>foo</code>" is equivalent to specifying
    "<code>foo.wad</code>".  An unfortunate consequence of this
    convention is that it's impossible to load a wad that would
    be really called "<code>foo</code>".  Though, under DOS, you
    can still work around this limitation by specifying the name
    with a trailing dot, ("<code>foo.</code>").

  <li>
    <p>
      The path can sometimes be omitted too, if the wad is in
      one of the <dfn>standard directories</dfn>, or one of
      their subdirectories.  If no file of the name you
      specified is found in the current directory, Yadex will
      look for a file of that name in the standard directories,
      which are&nbsp;:
    </p>

    <ol>
      <li>your home directory,
      <li><code>/usr/local/share/games/</code><var>game</var>,
      <li><code>/usr/share/games/</code><var>game</var>,
      <li><code>/usr/local/share/games/wads</code>,
      <li><code>/usr/share/games/wads</code>,
    </ol>

    <p>(where <var>game</var> is the name of the <a
    href="#game">game</a>).</p>

    <p>On the other hand, if you give an absolute file name,
    that is one that begins with a "<code>/</code>", the
    standard directories will <em>not</em> be used. Yadex will
    only try to open the file of the exact name you specified.

    <p>For example, if you type "<code>yadex -g doom2
    foo/bar</code>", Yadex will look for the following files in
    order&nbsp;:</p>

    <ol>
      <li><code>~/foo/bar.wad</code>,
      <li><code>/usr/local/share/games/doom2/foo/bar.wad</code>,
      <li><code>/usr/share/games/doom2/foo/bar.wad</code>,
      <li><code>/usr/local/share/games/wads/foo/bar.wad</code>,
      <li><code>/usr/share/games/wads/foo/bar.wad</code>,
    </ol>

    <p>and open the first it finds.</p>

    <p>But if you type
    "<code>yadex&nbsp;-g&nbsp;doom2&nbsp;/foo/bar</code>" (note
    the leading slash), Yadex will try to open
    "<code>/foo/bar.wad</code>", period.

    <p>The philosophy behind those standard directories is
    that&nbsp;:

    <ul>
      <li>a local file overrides a global one,
      <li>a game-specific file overrides a non-game-specific one.
    </ul>
</ul>

<p>Gotcha: those shorthands can only be used when
<em>reading</em> a pwad. When <em>writing</em> to a pwad, you
always have to specify the exact name, with the full path and
extension.

		<h3><a name="env">Environment variables</a></h3>

<dl class="compact">
  <dt><code>DOOMWADDIR</code>
  <dd>No, <code>DOOMWADDIR</code> is <em>not</em> supported.
    Perhaps in another version...

  <dt><code>DISPLAY</code>
  <dd>Unix only. The name of the X display that Yadex will try
    to connect to.

  <dt><code>HOME</code>
  <dd>Used to expand <code>~</code> when locating configuration
    and game definition files.

  <dt><code>LINES</code>
  <dd>If set, Yadex assumes the tty has that many lines instead
    of 24. The value must be an unsigned, non-zero decimal
    integer.

  <dt><code>TMPDIR</code>
  <dd>If set, swap files are created there. Otherwise, in
    <code>/tmp</code>.

  <dt><code>YADEX_GAME</code>
  <dd>Indicates the game to use. Overrides the <code>game</code>
    parameter in the config file, is overridden by the
    <code>-g</code> command line option.
</dl>

	<hr noshade>

	$(source editing.html.m7)

	<hr noshade>

	$(source config.html.m7)
	
	<hr noshade>

	<h2>Game definition files</h2>

<p>
  Most of Yadex's knowledge about thing numbers and names,
  linedef types etc. is retrieved from so-called game definition
  files. When you specify "<code>-g&nbsp;foo</code>", it in
  fact means that Yadex should use the game definition file
  named "<code>foo.ygd</code>".
</p>

		<h3>Contents of game definition files</h3>

<p>
  For Yadex to recognize the file as a game definition file, it
  must begin with a certain magic string. If it doesn't, Yadex
  will print an error message an bail out. The reason for being
  so fussy is to avoid headaches when the game definition file
  format changes and there are old game definition files lying
  around in your directories.
</p>

<p>
  Game definition files are not supposed to be modified in
  normal use. Their format is described in <a
  href="ygd.html"><code>ygd.html</code></a>.
</p>

		<h3><a name="ygd_locate">Locating game definition
		files</a></h3>

<p>
  The algorithm used to locate game definition files is exactly
  the same as the one described in  <a
  href="#config_locate">Locating configuration files</a>. Only
  the search path is different. As is the case for config files,
  it depends on the prefix for which Yadex was compiled.
</p>

<dl>
  <dt><code>/usr</code>&nbsp;:
  <dd>
    <ol>
      <li><code>.</code>
      <li><code>~/.yadex/$VERSION</code>
      <li><code>~/.yadex</code>
      <li><code>/usr/share/games/yadex/$VERSION</code>
      <li><code>/usr/share/games/yadex</code>
    </ol>

  <dt><code>/usr/local</code>&nbsp;:
  <dd>
    <ol>
      <li><code>.</code>
      <li><code>~/.yadex/$VERSION</code>
      <li><code>~/.yadex</code>
      <li><code>/usr/local/share/games/yadex/$VERSION</code>
      <li><code>/usr/local/share/games/yadex</code>
    </ol>

  <dt><code>/opt/<var>some/path</var></code>&nbsp;:
  <dd>
    <ol>
      <li><code>.</code>
      <li><code>~/.yadex/$VERSION</code>
      <li><code>~/.yadex</code>
      <li><code>/opt/<var>some/path</var>/share</code>
    </ol>

  <dt><code><var>/some/path</var></code>&nbsp;:
  <dd>
    <ol>
      <li><code>.</code>
      <li><code>~/.yadex/$VERSION</code>
      <li><code>~/.yadex</code>
      <li><code><var>/some/path</var>/share</code>
    </ol>
</dl>

<p>
  Additional directories can be prepended to the search path with the
  <code>-G</code> option.
  If <code>-G</code> is used more than once, the corresponding directories are
  searched in the order they appear on the command line.
</p>

		<h3>Use of game definition files</h3>

<p>
  On startup, Yadex loads the game definition file corresponding
  to the <code>game</code> variable. It performs a front-to-back
  search (see <a href="#ygd_locate">Locating game definition
  files</a>) for a file named <code><var>game</var>.ygd</code>.
  The first match is used.
</p>

	<hr noshade>
	<h2>Known bugs</h2>

<p>Though Yadex has quite a few bugs, most of them are
inconsequential, i.e. not likely to make Yadex unusable or
damage precious data. On the other hand, <strong>some can
bite</strong>. Those are the ones you should know about&nbsp;:

<ul>
  <li>
    <p>Command line options that take an argument need to have
    a space between their argument and themselves.</p>

  <li>
    <p>Exposure events are not always handled.  If the Yadex
    window turns black, back out by pressing [<kbd>esc</kbd>],
    several times if necessary.</p>

  <li>
    <p>If you edit a level from a file that contains several and
    save it, all the other levels, textures, flats, etc. from
    that file are <strong>lost</strong>.</p>

  <li>
    <p>Out-of-memory conditions and certain wad I/O errors are
    handled in a <em>very</em> ungraceful manner. Basically,
    Yadex aborts and if you haven't saved, you've lost all your
    work. My advice&nbsp;:</p>

    <ul>
      <li>Make sure you have at least a couple of megs of free
	memory.
      <li>Save often and make backups.
      <li>Don't use wads that contain errors.
      <li>Make sure you have enough disk space and adequate
	permissions.
      <li>Don't modify files with an external program while
	Yadex uses them. For example, if you use a texture wad,
	don't rebuild it without quitting Yadex first.
    </ul>
</ul>

<p>Check <a href="TODO"><code>TODO</code></a> for a complete
list of things to fix.

	<hr noshade>

	$(source support.html.m7)


<hr>AYM $SELF_DATE
</body>
</html>
